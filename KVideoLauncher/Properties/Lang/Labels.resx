<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
                  Microsoft ResX Schema
          
                  Version 1.3
          
                  The primary goals of this format is to allow a simple XML format 
                  that is mostly human readable. The generation and parsing of the 
                  various data types are done through the TypeConverter classes 
                  associated with the data types.
          
                  Example:
          
                  ... ado.net/XML headers & schema ...
                  <resheader name="resmimetype">text/microsoft-resx</resheader>
                  <resheader name="version">1.3</resheader>
                  <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
                  <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
                  <data name="Name1">this is my long string</data>
                  <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
                  <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
                      [base64 mime encoded serialized .NET Framework object]
                  </data>
                  <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
                      [base64 mime encoded string representing a byte array form of the .NET Framework object]
                  </data>
          
                  There are any number of "resheader" rows that contain simple 
                  name/value pairs.
          
                  Each data row contains a name, and value. The row also contains a 
                  type or mimetype. Type corresponds to a .NET class that support 
                  text/value conversion through the TypeConverter architecture. 
                  Classes that don't support this are serialized and stored with the 
                  mimetype set.
          
                  The mimetype is used for serialized objects, and tells the 
                  ResXResourceReader how to depersist the object. This is currently not 
                  extensible. For a given mimetype the value must be set accordingly:
          
                  Note - application/x-microsoft.net.object.binary.base64 is the format 
                  that the ResXResourceWriter will generate, however the reader can 
                  read any of the formats listed below.
          
                  mimetype: application/x-microsoft.net.object.binary.base64
                  value   : The object must be serialized with 
                      : System.Serialization.Formatters.Binary.BinaryFormatter
                      : and then encoded with base64 encoding.
          
                  mimetype: application/x-microsoft.net.object.soap.base64
                  value   : The object must be serialized with 
                      : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
                      : and then encoded with base64 encoding.
          
                  mimetype: application/x-microsoft.net.object.bytearray.base64
                  value   : The object must be serialized into a byte array 
                      : using a System.ComponentModel.TypeConverter
                      : and then encoded with base64 encoding.
              -->
    <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"
                id="root" xmlns="">
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1"/>
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required"/>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
    </resheader>
    <data name="LatestPlaylist" xml:space="preserve">
        <value>Latest playlist</value>
    </data>
    <data name="Directories" xml:space="preserve">
    <value>Directories:</value>
  </data>
    <data name="Drives" xml:space="preserve">
    <value>Drives:</value>
  </data>
    <data name="Exception" xml:space="preserve">
    <value>Exception</value>
  </data>
    <data name="Frequent" xml:space="preserve">
    <value>Frequent:</value>
  </data>
    <data name="NetworkSmb" xml:space="preserve">
    <value>Network (SMB)...</value>
  </data>
    <data name="NextPlaylist" xml:space="preserve">
    <value>Next playlist</value>
  </data>
    <data name="Play" xml:space="preserve">
    <value>Play</value>
  </data>
    <data name="PlayButDoNotClose" xml:space="preserve">
    <value>Play but don't close</value>
  </data>
    <data name="Playlist" xml:space="preserve">
    <value>Playlist:</value>
  </data>
    <data name="PreviousPlaylist" xml:space="preserve">
    <value>Previous playlist</value>
  </data>
    <data name="RefreshBothDirectoriesAndFiles" xml:space="preserve">
        <value>Refresh both directories and files</value>
    </data>
    <data name="Files" xml:space="preserve">
        <value>Files:</value>
    </data>
    <data name="TargetDirectoryDoesNotExist" xml:space="preserve">
        <value>The target directory doesn't exist.</value>
    </data>
    <data name="PlaylistFilesCountHasReachedLimit" xml:space="preserve">
        <value>The number of the files in the current playlist has reached the upper limit.</value>
    </data>
    <data name="GoToParentDirectory" xml:space="preserve">
    <value>Go to parent directory</value>
  </data>
    <data name="MoveUp" xml:space="preserve">
        <value>Move up</value>
    </data>
    <data name="MoveDown" xml:space="preserve">
        <value>Move down</value>
    </data>
</root>